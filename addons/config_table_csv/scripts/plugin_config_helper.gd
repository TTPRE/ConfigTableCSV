@tool
class_name PluginConfigHelper


const ERR_MESSAGE_START : String = "ConfigTableCSV:"

const ID_CREATE_CSV_CONFIG_TABLE : int = 0 #PopupMenu id create csv
const ID_ANALYZE_CSV_CONFIG_TABLE : int = 1 #PopupMenu id analyze csv
const ID_CREATE_CSV_CONFIG_HELPER : int = 2 #PopupMenu id create config helper
 
const CSV_TABEL_EFFECTIVE_LINE_BEGIN : int = 3

const CSV_FILE_SUFFIX : String = ".csv"
const CSV_DIR_PREFIX : String = "res://"

const DATA_SCRIPT_NAME_SUFFIX : String = "_data.gd"
const ANALYZE_SCRIPT_NAME_SUFFIX : String = "_analyze.gd"
const ID_SCRIPT_NAME_SUFFIX : String = "_id.gd"
const SCRIPT_NAME_SUFFIX : String = ".gd"

const DATA_CLASS_NAME_SUFFIX : String = "Data"
const ANALYZE_CLASS_NAME_SUFFIX : String = "Analyze"
const ID_CLASS_NAME_SUFFIX : String = "ID"
const CLASS_NAME_SUFFIX : String = ""

const CSV_CONFIG_TABLE_ANNOTATION_COLUMN_VARIABLE_NAME : String = "###"

const CSV_CONFIG_MANAGER_SCRIPT_NAME : String = "csv_config_manager.gd"
const CSV_CONFIG_MANAGER_AUTOLOAD_NAME : String = "CsvConfigManager"


const NEW_FILE_ANNOTATION : String = "## This file is generated by the ConfigTableCSV plugin"


const CONST_CSV_TABLE_PATH : String = "
## csv配置表格文件路径
const CSV_TABLE_PATH : String = \"{csv_table_path}\""


const FUNCTION_LOAD_CSV_CONFIG_TABLE : String = "
## 加载cvs表格数据以数组形式返回
static func load_csv_config_table(csv_table_path: String) -> Array[PackedStringArray]:
	var csv_table_data : Array[PackedStringArray] = []
	var file : FileAccess = FileAccess.open(csv_table_path, FileAccess.READ)
	while file.get_position() < file.get_length():
		var data : PackedStringArray = file.get_csv_line()
		csv_table_data.push_back(data)
	file.close()
	return csv_table_data"


const FUNCTION_GET_CONFIG_DATA_BEGIN : String = "
## 获取数据并转化变量类型
static func get_config_data() -> Array[{class_name}]:
	var result : Array[{class_name}] = []
	var csv_table_data : Array[PackedStringArray] = load_csv_config_table(CSV_TABLE_PATH)
	
	for index : int in range(PluginConfigHelper.CSV_TABEL_EFFECTIVE_LINE_BEGIN, csv_table_data.size()):
		var csv_table_data_line : PackedStringArray = csv_table_data[index]
		
		var new_data : {class_name} = {class_name}.new()"


const FUNCTION_GET_CONFIG_DATA_END : String = "		
		result.push_back(new_data)
	return result"


const FUNCTION_GET_SPECIFY_TYPE_DATA_FROM_STRING : String = "
static func remove_str_space(data: String) -> String:
	return data.replace(\" \",\"\")


static func get_bool_from_string(data: String) -> bool:
	data = remove_str_space(data)
	if data == \"true\" or data == \"True\" or data == \"TRUE\" or data == \"1\":
		return true
	return false


static func get_vector2_from_string(data: String) -> Vector2:
	data = remove_str_space(data)
	data = data.replace(\"，\", \",\")
	var psa_data : PackedStringArray = data.split(\",\", false, 1)
	if psa_data.size() < 2:
		return Vector2.ZERO
	var resault : Vector2 = Vector2(psa_data[0].to_float(), psa_data[1].to_float())
	return resault


static func get_vector3_from_string(data: String) -> Vector3:
	data = remove_str_space(data)
	data = data.replace(\"，\", \",\")
	var psa_data : PackedStringArray = data.split(\",\", false, 2)
	if psa_data.size() < 3:
		return Vector3.ZERO
	var resault : Vector3 = Vector3(psa_data[0].to_float(), psa_data[1].to_float(), psa_data[2].to_float())
	return resault


static func get_array_from_string(data: String) -> Array[String]:
	data = data.replace(\"；\", \";\")
	var psa_data : PackedStringArray = data.split(\";\", false)
	var resault : Array[String] = []
	for temp : String in psa_data:
		resault.append(temp)
	return resault
"


const SCRIPT_FILE_DATA : String = "
var _a_{csv_file_name} : Array[{data_class_name}] ##不要直接使用该变量，请使用函数访问
var _d_{csv_file_name} : Dictionary ##不要直接使用该变量，请使用函数访问


## 初始化
func _init() -> void:
	_a_{csv_file_name} = {analyze_class_name}.get_config_data()
	for data : {data_class_name} in _a_{csv_file_name}:
		_d_{csv_file_name}[data.unique_id] = data
	pass


## 不建议使用，除非能够确保引用的数据不会被修改，否则请使用函数 get_csv_data_duplicate()
func get_csv_data() -> Array[{data_class_name}]:
	return _a_{csv_file_name}


## 建议使用，相较于 get_csv_data() 更安全，同时会更消耗性能，性能敏感位置评估使用
func get_csv_data_duplicate() -> Array[{data_class_name}]:
	return _a_{csv_file_name}.duplicate(true)


## 不建议使用，除非能够确保引用的数据不会被修改，否则请使用函数 get_csv_data_line_duplicate(id: int)
func get_csv_data_line(id: int) -> {data_class_name}:
	if not _d_{csv_file_name}.has(id):
		return null
	return _d_{csv_file_name}[id]


## 建议使用，相较于 get_csv_data_line(id: int) 更安全，同时更消耗性能，性能敏感位置评估使用
func get_csv_data_line_duplicate(id: int) -> {data_class_name}:
	if not _d_{csv_file_name}.has(id):
		return null
	return _d_{csv_file_name}[id].duplicate()
"


static func get_class_name(csv_file_name_without_suffix: String, class_name_suffix: String) -> String:
	var result : String
	var underline_flag : bool = false
	
	for index : int in range(csv_file_name_without_suffix.length()):
		if index == 0 and is_letter(csv_file_name_without_suffix[index]):
			result += csv_file_name_without_suffix[index].to_upper()
			continue
		
		if csv_file_name_without_suffix[index] == "_":
			underline_flag = true
			continue
		
		if underline_flag and is_letter(csv_file_name_without_suffix[index]):
			result += csv_file_name_without_suffix[index].to_upper()
			underline_flag = false
			continue
		
		result += csv_file_name_without_suffix[index]
	
	result += class_name_suffix
	
	return result


static func is_letter(character: String) -> bool:
	if character.length() != 1:
		return false
	
	if not ((character >= "a" and character <= "z") or (character >= "A" and character <= "Z")):
		return false
	
	return true


static func get_type_standard_format(type: String) -> String:
	type = type.replace(" ","")
	
	if type == "int" or type == "Int" or type == "INT":
		return "int"
	elif type == "float" or type == "Float" or type == "FLOAT":
		return "float"
	elif type == "string" or type == "String" or type == "STRING":
		return "String"
	elif type == "bool" or type == "Bool" or type == "BOOL":
		return "bool"
	elif type == "vector2" or type == "Vector2" or type == "VECTOR2":
		return "Vector2"
	elif type == "vector3" or type == "Vector3" or type == "VECTOR3":
		return "Vector3"
	elif type == "array" or type == "Array" or type == "ARRAY":
		return "Array"
	
	printerr(PluginConfigHelper.ERR_MESSAGE_START + "Unrecognized variable type \"" + type + "\"")
	return type
